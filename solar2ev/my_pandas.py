
#!/usr/bin/env python3

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


meteo_file = "lans meteo_.csv"
meteo_file = meteo_file.replace('_','')

######################################
# PANDAS
######################################


df = pd.read_csv(meteo_file) # A Pandas DataFrame is a 2 dimensional data structure,

"""
       day  month  year  hour  temp humid  wind  pressure
0        1      1  2021  23.0  -4.8   94%   0.0    1008.5
1        1      1  2021  22.0  -4.8   94%   0.0    1008.5
2        1      1  2021  21.0  -4.8   94%   0.0    1008.5
3        1      1  2021  20.0  -4.7   93%   0.0    1008.2
[16428 rows x 8 columns]
"""
# loc by name ie index = 0
print(df.loc[0]) # <class 'pandas.core.series.Series'> df.loc[0] ['temp']
"""
day              1
month            1
year          2021
hour          23.0
temp          -4.8
humid          94%
wind           0.0
pressure    1008.5
Name: 0, dtype: object
"""
#print(df.loc['0']) # Exception has occurred: KeyErro

# iloc by numerical index
print(df.iloc[1:2])
#    day  month  year  hour  temp humid  wind  pressure
#1    1      1  2021  22.0  -4.8   94%   0.0    1008.5

print(df.head(5))
print(df.tail(5))

for i, j in df.iterrows():
    print(i,j)
    break

"""
set index, otherwize created automatically
df.set_index('colum')
df.index = df[date_time_key]
"""

print(df.info())
print(df.shape) # (15081, 8)


# get a time serie
temp = df['temp']
print('temp serie\n' , temp, type(temp)) # Name: temp, Length: 15081, dtype: float64 <class 'pandas.core.series.Series'>
print(temp.mean(), temp.std())

# convert from serie to list
temp_list = temp.tolist() 
print(temp_list[:3], type(temp_list))

# get a data frame with specifc colums
temp_df = df[['temp', 'pressure']] 

print(type(temp_df.value)) # Return a Numpy representation of the DataFrame.

print(temp_df.corr())

print(temp.info())
"""
<class 'pandas.core.series.Series'>
RangeIndex: 15081 entries, 0 to 15080
Series name: temp
Non-Null Count  Dtype
--------------  -----
14997 non-null  float64
dtypes: float64(1)
memory usage: 117.9 KB
None
"""
print(temp.describe()) # for categorical or not
"""
count    14997.000000
mean         7.149597
std          7.776942
min        -13.200000
25%          1.400000
50%          7.100000
75%         12.700000
max         29.300000
Name: temp, dtype: float64
"""

print(temp.value_counts()) # frequencie of value in colums
"""
10.0    115
 5.2      93
 8.6      90
 9.7      87
 4.3      87
        ...
-10.5      1
-11.9      1
-11.1      1
-11.3      1
 28.4      1
 """


print(df.corr()) # correlation between columns

df = df.drop_duplicates()
# df.drop_duplicates(inplace=True)

print('list of colums ', df.columns, type(df.columns)) 
# list of colums  Index(['day', 'month', 'year', 'hour', 'temp', 'humid', 'wind', 'pressure'], dtype='object') <class 'pandas.core.indexes.base.Index'>

df.rename(columns ={'pressure': 'hpa'}, inplace=False)

for col in df: # iterates gives names
    print(col, type(col)) # day <class 'str'>

print(df.isnull()) # data frame
print(df.isnull().sum())

# drop row
_ = df.dropna()

# drop colum
_ = df.dropna(axis=1)

# imputation for temp column
print(temp.isnull())   # return a list of bool
print(temp.isnull().sum()) # 84 scalar for serie, not for data frame
x = temp.fillna(0)
print(x.info())
print(x.isnull().sum()) # 


#df.plot()
#df.plot(kind = 'scatter', x = 'pressure', y = 'temp')
plt.show()

### filtering
print (df.iloc[-1])
print(df.iloc[-1]['temp']) # nan  Not a Number
#assert (df.iloc[-1]['temp'] == np.nan) # generates exception
assert (np.isnan(df.iloc[-1]['temp']))

# remove nan, generated by scrapping future, or some missing temp value 
# assume that there are no instance of missing value when temp is not missing
# assert later
filter = np.isnan(df['temp']) == False  # return list of boolean
#print(filter)

f1 = df[filter] # pass list of boolean, generated by filter
print(f1.tail(2))

### apply functions
def remove_percent(x):
    #print(x, type(x)) # 94% <class 'str'>
    return(int(x.replace('%', '')))

f1['humid'] = f1['humid'].apply(remove_percent)

# subsample hours
# so you should use "bitwise" | (or) or & (and) operations:

#filter = f1['hour']  == 23.0 | f1['hour']  == 17.0 | f1['hour']  == 11.0 | f1['hour']  == 5.0 # error
filter = f1['hour']  == 23.0  # ok
filter = f1['hour'].isin ([23.0,17.0,11.0,5.0])
clean = f1[filter]
print(clean.head(10))
print(clean.tail(10))

#print(clean.isnull().sum())  # serie of scalar, one per colums

assert clean.isnull().sum().all() == 0

# add .all() ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
print(clean.info())
print(clean.describe())

# box, upper quartile, 25% of data greater than this value
clean['temp'].plot(kind="box")
plt.show()